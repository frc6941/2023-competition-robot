// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import org.frcteam6941.utils.Range;

import edu.wpi.first.math.controller.ArmFeedforward;
import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.geometry.Pose3d;
import edu.wpi.first.math.geometry.Rotation3d;
import edu.wpi.first.math.geometry.Transform3d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import frc.robot.motion.SuperstructureConstraint;

/**
 * The Constants class provides a convenient place for teams to hold robot-wide
 * numerical or boolean
 * constants. This class should not be used for any other purpose. All constants
 * should be declared
 * globally (i.e. public static). Do not put anything functional in this class.
 *
 * <p>
 * It is advised to statically import this class (or one of its inner classes)
 * wherever the
 * constants are needed, to reduce verbosity.
 */
public final class Constants {
    public static final boolean TUNING = true;
    public static final boolean AUTO_TUNING = false;

    // FMS Related Information
    public static final class FMS {
        public static Alliance ALLIANCE() {
            return DriverStation.getAlliance();
        }
    }

    // Looper Configurations
    public static final double LOOPER_DT = 1.0 / 150.0; // The robot is running at 150Hz

    // CAN ID Configurations
    public static final class CANID {
        public static final int DRIVETRAIN_FRONT_LEFT_DRIVE_MOTOR = 0;
        public static final int DRIVETRAIN_FRONT_LEFT_STEER_MOTOR = 1;
        public static final int DRIVETRAIN_FRONT_RIGHT_DRIVE_MOTOR = 2;
        public static final int DRIVETRAIN_FRONT_RIGHT_STEER_MOTOR = 3;
        public static final int DRIVETRAIN_BACK_LEFT_DRIVE_MOTOR = 4;
        public static final int DRIVETRAIN_BACK_LEFT_STEER_MOTOR = 5;
        public static final int DRIVETRAIN_BACK_RIGHT_DRIVE_MOTOR = 6;
        public static final int DRIVETRAIN_BACK_RIGHT_STEER_MOTOR = 7;

        public static final int ARM_MOTOR = 8;
        public static final int EXTENDER_MOTOR = 9;
        public static final int INTAKER_MOTOR = 10;

        public static final int PNEUMATICS_HUB = 1;
    }

    // Analog ID Configurations
    public static final class ANALOG_ID {
        public static final int GAMEPIECE_SENSOR = 0;
    }

    public static final class LED_CONTROL {
        public static final int LED_PORT = 0;
        public static final int LED_LENGTH = 51;
    }

    // Pneumatics Configurations
    public static final class PNEUMATICS_ID {
        public static final int INTAKER_EXTENDER_FORWARD = 4;
        public static final int INTAKER_EXTENDER_REVERSE = 5;
        public static final int CLIMBER_EXTENDER_FORWARD = 6;
        public static final int CLIMBER_EXTENDER_REVERSE = 7;
    }

    // Swerve Drivetrain Constants
    public static final class SUBSYSTEM_SWERVE {
        public static final double DRIVE_MAX_VELOCITY = 3.5;

        public static final double MODULE_MAX_VELOCITY = 4.0;
        public static final double MODULE_WHEEL_CIRCUMFERENCE = Math.PI * Units.inchesToMeters(4.125);

        public static final double DRIVE_GEAR_RATIO = 7.0;
        public static final double ANGLE_GEAR_RATIO = 10.0;
        public static final double DRIVETRAIN_SIDE_WIDTH = 0.58;
        public static final Translation2d DRIVETRAIN_CENTER_OF_ROTATION = new Translation2d(0.0, 0.0);

        public static final double FRONT_LEFT_OFFSET = -3339.755859 + 59.677734 + 180.0;
        public static final double FRONT_RIGHT_OFFSET = -2304.580078 + 180.0;
        public static final double BACK_LEFT_OFFSET = -2758.623047 + 180.0;
        public static final double BACK_RIGHT_OFFSET = -2914.277344 + 180.0;

        public static final int MAX_LATENCY_COMPENSATION_MAP_ENTRIES = 50;

        public static final double DRIVETRAIN_HEADING_CONTROLLER_KP = 1.0 / 30.0;
        public static final double DRIVETRAIN_HEADING_CONTROLLER_KI = 0.0001;
        public static final double DRIVETRAIN_HEADING_CONTROLLER_KD = 0.00;
        public static final double DRIVETRAIN_STATIC_HEADING_KS = 0.03;
        public static final TrapezoidProfile.Constraints DRIVETRAIN_HEADING_CONTROLLER_CONSTRAINT = new TrapezoidProfile.Constraints(
                360, 360 * 360);

        // Note: the feedforward generated by SysID is corresponding to motor
        // voltage(which is in the range of +-12V). So when in
        // autonomous, the gain need to be resized to value ranging from -1 to 1
        // accordingly.
        public static final SimpleMotorFeedforward DRIVETRAIN_FEEDFORWARD = new SimpleMotorFeedforward(0.60757, 7.6216,
                0.71241);
    }

    // Arm Constants
    public static final class SUBSYSTEM_ARM {
        public static final double MASS = 10.0;
        public static final double GEAR_RATIO = 50.0;

        public static final double HOME_ANGLE = 220.0;

        public static final double KP = 1.0;
        public static final double KI = 0.0;
        public static final double KD = 0.0;
        public static final double KF = 0.0;
        public static final double CRUISE_V = 20000.0;
        public static final double CRUIVE_ACC = 40000.0;

        public static final ArmFeedforward FEEDFORWARD = new ArmFeedforward(0, 0, 0, 0);
    }

    // Extender Constants
    public static final class SUBSYSTEM_EXTENDER {
        public static final double GEAR_RATIO = 40.0;
        public static final double WHEEL_CIRCUMFERENCE = Math.PI * 0.06;
        public static final double HOME_LENGTH = 80.0;

        public static final double KP = 1.0;
        public static final double KI = 0.0;
        public static final double KD = 0.0;
        public static final double KF = 0.0;
        public static final double CRUISE_V = 20000.0;
        public static final double CRUIVE_ACC = 40000.0;
    }

    // Superstructure Constants
    public static final class SUBSYSTEM_SUPERSTRUCTURE {
        public static class STRUCTURE {
            public static Transform3d ROBOT_CENTER_TO_LOW_PIVOT = new Transform3d(
                    new Pose3d(), new Pose3d(0.50, 0, 0.10, new Rotation3d()));
            public static Transform3d LOW_PIVOT_TO_HIGH_PIVOT = new Transform3d(
                    new Pose3d(), new Pose3d(-0.50, 0.0, 0.80, new Rotation3d()));
            public static Transform3d ROBOT_CENTER_TO_HIGH_PIVOT = ROBOT_CENTER_TO_LOW_PIVOT
                    .plus(LOW_PIVOT_TO_HIGH_PIVOT);
            public static Translation2d LOW_PIVOT_2D_POSITION = new Translation2d(
                    ROBOT_CENTER_TO_LOW_PIVOT.getX(),
                    ROBOT_CENTER_TO_LOW_PIVOT.getZ());
            public static Translation2d LOW_TO_HIGH_2D_TRANSLATION = new Translation2d(
                    LOW_PIVOT_TO_HIGH_PIVOT.getX(),
                    LOW_PIVOT_TO_HIGH_PIVOT.getZ());
            public static Translation2d HIGH_PIVOT_2D_LOCATION = LOW_PIVOT_2D_POSITION.plus(LOW_TO_HIGH_2D_TRANSLATION);
        }

        // Thresholds
        public static class THRESHOLD {
            public static double ARM = 2.0;
            public static double EXTENDER = 0.02;
        }

        // Constraints
        public static class CONSTRAINTS {
            public static Range ARM_RANGE = new Range(-70.0, 235);
            public static Range EXTENDER_RANGE = new Range(0.80, 1.20);
            public static Range HEIGHT_RANGE = new Range(0.005, 0.198);
            public static Range DANGEROUS_POSITIVE = new Range(210, Double.POSITIVE_INFINITY);
            public static Range DANGEROUS_NEGATIVE = new Range(Double.NEGATIVE_INFINITY, -60.0);
            public static SuperstructureConstraint SUPERSTRUCTURE_LIMIT = new SuperstructureConstraint(
                ARM_RANGE, ARM_RANGE, EXTENDER_RANGE, DANGEROUS_POSITIVE, DANGEROUS_NEGATIVE
            );
        }
    }

    // Controller
    public static final class CONTROLBOARD {
        public static final double CONTROLLER_DEADBAND = 0.09;

        public static final int DRIVER_CONTROLLER_PORT = 0;
        public static final boolean CONTROLLER_INVERT_X = false;
        public static final boolean CONTROLLER_INVERT_Y = false;
        public static final boolean CONTROLLER_INVERT_R = false;
        public static final double CONTROLLER_PEDAL = 0.3;

        public static final int OPERATOR_CONTROLLER_PORT = 1;
    }
}
