// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;

/**
 * The Constants class provides a convenient place for teams to hold robot-wide
 * numerical or boolean
 * constants. This class should not be used for any other purpose. All constants
 * should be declared
 * globally (i.e. public static). Do not put anything functional in this class.
 *
 * <p>
 * It is advised to statically import this class (or one of its inner classes)
 * wherever the
 * constants are needed, to reduce verbosity.
 */
public final class Constants {
    public static final boolean TUNING = true;
    public static final boolean AUTO_TUNING = false;

    // FMS Related Information
    public static final class FMS {
        public static Alliance ALLIANCE() {
            return DriverStation.getAlliance();
        }
    }

    // Looper Configurations
    public static final double LOOPER_DT = 1.0 / 150.0; // The robot is running at 150Hz

    // CAN ID Configurations
    public static final class CANID {
        public static final int DRIVETRAIN_FRONT_LEFT_DRIVE_MOTOR = 0;
        public static final int DRIVETRAIN_FRONT_LEFT_STEER_MOTOR = 1;
        public static final int DRIVETRAIN_FRONT_RIGHT_DRIVE_MOTOR = 2;
        public static final int DRIVETRAIN_FRONT_RIGHT_STEER_MOTOR = 3;
        public static final int DRIVETRAIN_BACK_LEFT_DRIVE_MOTOR = 4;
        public static final int DRIVETRAIN_BACK_LEFT_STEER_MOTOR = 5;
        public static final int DRIVETRAIN_BACK_RIGHT_DRIVE_MOTOR = 6;
        public static final int DRIVETRAIN_BACK_RIGHT_STEER_MOTOR = 7;

        public static final int ARM_MOTOR = 8;
        public static final int INTAKER_MOTOR = 9;

        public static final int PNEUMATICS_HUB = 1;
    }

    // Analog ID Configurations
    public static final class ANALOG_ID {
        public static final int GAMEPIECE_SENSOR = 0;
    }

    public static final class LED_CONTROL {
        public static final int LED_PORT = 0;
        public static final int LED_LENGTH = 51;
    }

    // Pneumatics Configurations
    public static final class PNEUMATICS_ID {
        public static final int INTAKER_EXTENDER_FORWARD = 4;
        public static final int INTAKER_EXTENDER_REVERSE = 5;
        public static final int CLIMBER_EXTENDER_FORWARD = 6;
        public static final int CLIMBER_EXTENDER_REVERSE = 7;
    }

    // Swerve Drivetrain Constants
    public static final class SUBSYSTEM_SWERVE {
        public static final double DRIVE_MAX_VELOCITY = 3.5;

        public static final double MODULE_MAX_VELOCITY = 4.0;
        public static final double MODULE_WHEEL_CIRCUMFERENCE = Math.PI * Units.inchesToMeters(4.125);

        public static final double DRIVE_GEAR_RATIO = 7.73;
        public static final double ANGLE_GEAR_RATIO = 10.0;
        public static final double DRIVETRAIN_SIDE_WIDTH = 0.58;
        public static final Translation2d DRIVETRAIN_CENTER_OF_ROTATION = new Translation2d(0.0, 0.0);

        public static final double FRONT_LEFT_OFFSET = -3339.755859 + 59.677734 + 180.0;
        public static final double FRONT_RIGHT_OFFSET = -2304.580078 + 180.0;
        public static final double BACK_LEFT_OFFSET = -2758.623047 + 180.0;
        public static final double BACK_RIGHT_OFFSET = -2914.277344 + 180.0;

        public static final int MAX_LATENCY_COMPENSATION_MAP_ENTRIES = 50;

        public static final double DRIVETRAIN_HEADING_CONTROLLER_KP = 1.0 / 30.0;
        public static final double DRIVETRAIN_HEADING_CONTROLLER_KI = 0.0001;
        public static final double DRIVETRAIN_HEADING_CONTROLLER_KD = 0.00;
        public static final double DRIVETRAIN_STATIC_HEADING_KS = 0.03;
        public static final TrapezoidProfile.Constraints DRIVETRAIN_HEADING_CONTROLLER_CONSTRAINT = new TrapezoidProfile.Constraints(
                360, 360 * 360);

        // Note: the feedforward generated by SysID is corresponding to motor
        // voltage(which is in the range of +-12V). So when in
        // autonomous, the gain need to be resized to value ranging from -1 to 1
        // accordingly.
        public static final SimpleMotorFeedforward DRIVETRAIN_FEEDFORWARD = new SimpleMotorFeedforward(0.60757, 7.6216,
                0.71241);
    }

    // Controller
    public static final class CONTROLBOARD {
        public static final double CONTROLLER_DEADBAND = 0.09;

        public static final int DRIVER_CONTROLLER_PORT = 0;
        public static final boolean CONTROLLER_INVERT_X = false;
        public static final boolean CONTROLLER_INVERT_Y = false;
        public static final boolean CONTROLLER_INVERT_R = false;
        public static final double CONTROLLER_PEDAL = 0.3;

        public static final int OPERATOR_CONTROLLER_PORT = 1;
    }
}
